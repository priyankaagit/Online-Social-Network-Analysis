Grade: 30.00/50.00

6 Deduction(s):

--------------
#1: 4.00 points
Failing test: test_cosine_sim_1: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 79, in test_cosine_sim_1
    v = cosine_sim(csr_matrix([1,2,3]), csr_matrix([4,-5,6]))
  File "students/priyankaagit/a3/a3.py", line 154, in cosine_sim
    return np.dot(a,b.T)/((np.linalg.norm(a))* (np.linalg.norm(b)))
  File "/usr/local/lib/python3.6/site-packages/numpy/linalg/linalg.py", line 2167, in norm
    sqnorm = dot(x, x)
  File "/usr/local/lib/python3.6/site-packages/scipy/sparse/base.py", line 368, in __mul__
    raise ValueError('dimension mismatch')
ValueError: dimension mismatch

source:
    def test_cosine_sim_1(self):
         """
         @points=4
         """
         v = cosine_sim(csr_matrix([1,2,3]), csr_matrix([4,-5,6]))
         if type(v) is not float:
             v = v.sum()
         self.assertEqual('%.2f' % round(v, 2),
                          '0.37')
--------------

--------------
#2: 4.00 points
Failing test: test_cosine_sim_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 89, in test_cosine_sim_2
    v = cosine_sim(csr_matrix([1,2,0]), csr_matrix([4,-5,6]))
  File "students/priyankaagit/a3/a3.py", line 154, in cosine_sim
    return np.dot(a,b.T)/((np.linalg.norm(a))* (np.linalg.norm(b)))
  File "/usr/local/lib/python3.6/site-packages/numpy/linalg/linalg.py", line 2167, in norm
    sqnorm = dot(x, x)
  File "/usr/local/lib/python3.6/site-packages/scipy/sparse/base.py", line 368, in __mul__
    raise ValueError('dimension mismatch')
ValueError: dimension mismatch

source:
    def test_cosine_sim_2(self):
         """
         @points=4
         """
         v = cosine_sim(csr_matrix([1,2,0]), csr_matrix([4,-5,6]))
         if type(v) is not float:
             v = v.sum()        
         self.assertEqual('%.2f' % round(v, 2),
                          '-0.31')
--------------

--------------
#3: 4.00 points
Failing test: test_predict_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 134, in test_predict_2
    movies, vocab = featurize(movies)
  File "students/priyankaagit/a3/a3.py", line 123, in featurize
    data.append(tf_frequency[m['movieId']][0][f]/ (tf_frequency[m['movieId']][1] * math.log10(N/df_frequency[f])))
ZeroDivisionError: float division by zero

source:
    def test_predict_2(self):
         """
         @points=4
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance', ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'comedy|horror', ['comedy', 'horror']],
                                [789, 'horror', ['horror']],
                                [000, 'action', ['action']]],
                               columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         ratings_train = pd.DataFrame([
                 [9, 123, 2.5, 1260759144],
                 [9, 456, 3.5, 1260759144],
                 [9, 789, 1, 1260759144],
                 [8, 123, 4.5, 1260759144],
                 [8, 456, 4, 1260759144],
                 [8, 789, 5, 1260759144],
                 [7, 123, 2, 1260759144],
                 [7, 456, 3, 1260759144]],
                                      columns=['userId', 'movieId', 'rating', 'timestamp'])
         ratings_test = pd.DataFrame([
                 [7, 789, 4, 1260759144]],
                                     columns=['userId', 'movieId', 'rating', 'timestamp'])
 
         self.assertEqual('%.1f' % round(make_predictions(movies, ratings_train, ratings_test)[0], 1), '2.6')
--------------

--------------
#4: 3.00 points
Failing test: test_vectorize_1: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 43, in test_vectorize_1
    movies, vocab = featurize(movies)
  File "students/priyankaagit/a3/a3.py", line 123, in featurize
    data.append(tf_frequency[m['movieId']][0][f]/ (tf_frequency[m['movieId']][1] * math.log10(N/df_frequency[f])))
ZeroDivisionError: float division by zero

source:
    def test_vectorize_1(self):
         """
         @points=3
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         self.assertListEqual(sorted(vocab.items()),
                              [('horror', 0), ('romance', 1)])
--------------

--------------
#5: 2.00 points
Failing test: test_vectorize_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 55, in test_vectorize_2
    movies, vocab = featurize(movies)
  File "students/priyankaagit/a3/a3.py", line 123, in featurize
    data.append(tf_frequency[m['movieId']][0][f]/ (tf_frequency[m['movieId']][1] * math.log10(N/df_frequency[f])))
ZeroDivisionError: float division by zero

source:
    def test_vectorize_2(self):
         """
         @points=2
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         row0 = movies['features'].tolist()[0]
         self.assertEqual('%.2f' % round(max(list(row0.data)), 2),
                             '0.20')
         self.assertEqual(round(min(row0.toarray()[0]), 1),
                             0.0)
--------------

--------------
#6: 3.00 points
Failing test: test_vectorize_3: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 70, in test_vectorize_3
    movies, vocab = featurize(movies)
  File "students/priyankaagit/a3/a3.py", line 123, in featurize
    data.append(tf_frequency[m['movieId']][0][f]/ (tf_frequency[m['movieId']][1] * math.log10(N/df_frequency[f])))
ZeroDivisionError: float division by zero

source:
    def test_vectorize_3(self):
         """
         @points=3
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         row1 = movies['features'].tolist()[1]
         self.assertEqual(round(max(list(row1.toarray()[0])), 1),
                          0.0)
--------------

